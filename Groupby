def matchcity(group):
    statetarget = group.iloc[0,0]
    testGeo = Geo.loc[Geo['state_id'] == statetarget]
    testGeo['index'] = testGeo.index
    group['index'] = group.index
    duplicates = pd.Series(group['HQ City'])
    print(testGeo.columns)
    if testGeo.size>0: 

        matches = match_strings(testGeo['city'] ,duplicates,max_n_matches=1,min_similarity=0.8)

        group1 = matches.merge(testGeo, left_on='left_index', right_on='index')
        group2 = group1.merge(group, left_on='right_index', right_on='index')
        return group2
    else: 
        print('empty')
        

results = firmdata.groupby(['HQ State']).apply(matchcity)


def flatten_extend(matrix):
    flat_list = []
    for row in matrix:
            flat_list.extend(row)
    return flat_list

def issuecalculate(group):
    issues = group['issues'].str.split(pat =';', expand=True)
    issuecounts = flatten_extend(issues.values)
    issuecounts= [x for x in issuecounts if x is not None]
    issuevalue =  Counter(issuecounts)
    df3 = pd.DataFrame.from_dict(issuevalue, orient='index').reset_index()
    return df3
results = protestsclean.head(10).groupby(['statefips', 'countyfips','year']).apply(issuecalculate)

test = results.index.to_frame(index=False)
results = pd.DataFrame(results).reset_index(drop=True)
test['issues'] = results.iloc[:,0]
test['issuesnum'] = results.iloc[:,1]

print(test)
