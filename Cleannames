import pandas as pd
import re
import html
import json

def cleannamelist(namelist):
  list_raworg_nodup = list(namelist)

  
  
  list_cleanorg = []
  for i in range(0, len(list_raworg_nodup)):
      raw_name = list_raworg_nodup[i]
      # this unescape takes care most of the "&"
     # clean_name = html.unescape(raw_name)
      clean_name = raw_name.lower()
      list_cleanorg.append(clean_name)
  
  checkfmt = re.compile(r'\d+;') # at least one digit followed by a ";"
  for i in range(0, len(list_cleanorg)):
      name = list_cleanorg[i]
      match = re.search(checkfmt, name, flags=0)
      if match:
          name = name.replace(match.group(0), '')
          list_cleanorg[i] = name
  
  
  # These are stuff need to take care
  err_fmt = ['f;vis', ';3m', ';bri', 'hô ;', 'sil;verbrook', 'el;ectronics', 'people;s', 's;p.a.', 'co;,']
  crr_fmt = ['vis'  , '3m' , 'bri' , 'hô'  , 'silverbrook' , 'electronics' , 'people\'s','s.p.a.', 'co,' ]
  
  for i in range(0, len(list_cleanorg)):
      name = list_cleanorg[i]
      for j in range(0, len(err_fmt)):
          err = err_fmt[j]
          crr = crr_fmt[j]
          if err in name:
              newname = name.replace(err, crr)
              list_cleanorg[i] = newname
          
  
  post = r"( |\()a corp.*of.*$" # take care of "a corp... of..."
  post_re = re.compile(post)
  for i in range(0, len(list_cleanorg)):
      name = list_cleanorg[i]
      newname = post_re.sub('',name)
      list_cleanorg[i] = newname
  
  
  # dict_replace gives the correct char to replace the old one
  with open('/Users/jjw6286/Library/CloudStorage/Dropbox/WangjuekateDropbox/TechWar_InnovationCollaboration_Jun/Empirics/Matchpatentassignee_publicfirm/patentsmatch_bingsearchapproach-master/clean_name/dict_char_replace.json', 'r') as f:
      dict_replace = json.load(f)
  
  # change ., to space
  for i in range(0, len(list_cleanorg)):
      name = list_cleanorg[i]
      if '.,' in name:
          newname = name.replace('.,', ' ')
          list_cleanorg[i] = newname
  
  
  ##### below to find x.x.x.x.x.x.x from 10 x(s) to 3 x(s) #####################
  def find_pattern(name):
      for i in range(10,1,-1):
          temp_re = re.compile('\\b(\\w)' + i*'\\.(\\w)\\b')
          m = re.search(temp_re, name)
          if m:
              print(name)
              print(m.group(0))
              return m.group(0)
  
  def fix_pattern(name, i): # i from 10 to 1
      temp_re = re.compile('\\b(\\w)' + i*'\\.(\\w)\\b') # means x.x.x... (from 11x to 2x)
      m = re.search(temp_re, name)
      if m:
          new_re = ''.join(ele for ele in ['\\' + str(j) for j in range(1, i+1+1)])
          # for example, when i = 5, new_re = r"\1\2\3\4\5\6"
          newname = temp_re.sub(new_re, name)
          return newname
      else:
          return name
          
  n = 0
  for i in range(0, len(list_cleanorg)):
      name = list_cleanorg[i]
      newname = list_cleanorg[i]
      for n_x in range(10, 0, -1):
          newname = fix_pattern(newname, n_x)
      if newname != name:
          n+=1        
          list_cleanorg[i] = newname
  
  ################ begin to take care of {} #################################
  match_re = re.compile(r"{.*over.*\((.)\)}")
  
  '''
  check all these strange {  over ()} cases
  for patentid, name in dict_clean_char[list_char[62]].items():
      m = re.search(match_re, name)
      if m:
          if m.group(1) == ' ':
              print(patentid)
              print(name)
              print(m.group(1))
  '''
  
  n=0
  for i in range(0, len(list_cleanorg)):
      name = list_cleanorg[i]
      m = re.search(match_re, name)
      if m:
          if m.group(1) == ' ':
              replace_char = ''
          else:
              replace_char = m.group(1)
          newname = re.sub(match_re, replace_char, name)
          list_cleanorg[i] = newname
          n+=1
  return(list_cleanorg)
